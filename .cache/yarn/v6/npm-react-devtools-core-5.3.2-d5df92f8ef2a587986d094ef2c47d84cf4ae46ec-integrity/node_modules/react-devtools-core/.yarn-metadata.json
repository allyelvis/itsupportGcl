{
  "manifest": {
    "name": "react-devtools-core",
    "version": "5.3.2",
    "description": "Use react-devtools outside of the browser",
    "license": "MIT",
    "main": "./dist/backend.js",
    "repository": {
      "type": "git",
      "url": "https://github.com/facebook/react.git",
      "directory": "packages/react-devtools-core"
    },
    "files": [
      "dist",
      "backend.js",
      "standalone.js"
    ],
    "scripts": {
      "build": "yarn build:backend && yarn build:standalone",
      "build:backend": "cross-env NODE_ENV=production webpack --config webpack.backend.js",
      "build:backend:fb": "cross-env NODE_ENV=production FEATURE_FLAG_TARGET=core/backend-fb webpack --config webpack.backend.js",
      "build:standalone": "cross-env NODE_ENV=production webpack --config webpack.standalone.js",
      "build:standalone:fb": "cross-env NODE_ENV=production FEATURE_FLAG_TARGET=core/standalone-fb webpack --config webpack.standalone.js",
      "prepublish": "yarn run build",
      "start:backend": "cross-env NODE_ENV=development webpack --config webpack.backend.js --watch",
      "start:standalone": "cross-env NODE_ENV=development webpack --config webpack.standalone.js --watch"
    },
    "dependencies": {
      "shell-quote": "^1.6.1",
      "ws": "^7"
    },
    "devDependencies": {
      "cross-env": "^3.1.4",
      "process": "0.11.10",
      "webpack": "^5.82.1",
      "webpack-cli": "^5.1.1",
      "workerize-loader": "^2.0.2"
    },
    "_registry": "npm",
    "_loc": "/home/itsupport/.cache/yarn/v6/npm-react-devtools-core-5.3.2-d5df92f8ef2a587986d094ef2c47d84cf4ae46ec-integrity/node_modules/react-devtools-core/package.json",
    "readmeFilename": "README.md",
    "readme": "# `react-devtools-core`\n\nThis package provides low-level APIs to support renderers like [React Native](https://github.com/facebook/react-native). If you're looking for the standalone React DevTools UI, **we suggest using [`react-devtools`](https://github.com/facebook/react/tree/main/packages/react-devtools) instead of using this package directly**.\n\nThis package provides two entrypoints: labeled \"backend\" and \"standalone\" (frontend). Both APIs are described below.\n\n# Backend API\n\nBackend APIs are embedded in _development_ builds of renderers like [React Native](https://github.com/facebook/react-native) in order to connect to the React DevTools UI.\n\n### Example\n\nIf you are building a non-browser-based React renderer, you can use the backend API like so:\n\n```js\nif (process.env.NODE_ENV !== 'production') {\n  const { connectToDevTools } = require(\"react-devtools-core\");\n\n  // Must be called before packages like react or react-native are imported\n  connectToDevTools({\n    ...config\n  });\n}\n```\n\n> **NOTE** that this API (`connectToDevTools`) must be (1) run in the same context as React and (2) must be called before React packages are imported (e.g. `react`, `react-dom`, `react-native`).\n\n### `connectToDevTools` options\n| Prop | Default | Description |\n|---|---|---|\n| `host` | `\"localhost\"` | Socket connection to frontend should use this host. |\n| `isAppActive` |  | (Optional) function that returns true/false, telling DevTools when it's ready to connect to React. |\n| `port` | `8097` | Socket connection to frontend should use this port. |\n| `resolveRNStyle` |  | (Optional) function that accepts a key (number) and returns a style (object); used by React Native. |\n| `retryConnectionDelay` | `200` | Delay (ms) to wait between retrying a failed Websocket connection |\n| `useHttps` | `false` | Socket connection to frontend should use secure protocol (wss). |\n| `websocket` |  | Custom `WebSocket` connection to frontend; overrides `host` and `port` settings. |\n\n\n### `connectWithCustomMessagingProtocol` options\n| Prop            | Description                                                                                                                                                    |\n|-----------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `onSubscribe`   | Function, which receives listener (function, with a single argument) as an argument. Called when backend subscribes to messages from the other end (frontend). |\n| `onUnsubscribe` | Function, which receives listener (function) as an argument. Called when backend unsubscribes to messages from the other end (frontend).                       |\n| `onMessage`     | Function, which receives 2 arguments: event (string) and payload (any). Called when backend emits a message, which should be sent to the frontend.             |\n\nUnlike `connectToDevTools`, `connectWithCustomMessagingProtocol` returns a callback, which can be used for unsubscribing the backend from the global DevTools hook.\n\n# Frontend API\n\nFrontend APIs can be used to render the DevTools UI into a DOM node. One example of this is [`react-devtools`](https://github.com/facebook/react/tree/main/packages/react-devtools) which wraps DevTools in an Electron app.\n\n### Example\n```js\nimport DevtoolsUI from \"react-devtools-core/standalone\";\n\n// See the full list of API methods in documentation below.\nconst { setContentDOMNode, startServer } = DevtoolsUI;\n\n// Render DevTools UI into a DOM element.\nsetContentDOMNode(document.getElementById(\"container\"));\n\n// Start socket server used to communicate between backend and frontend.\nstartServer(\n  // Port defaults to 8097\n  1234,\n\n  // Host defaults to \"localhost\"\n  \"example.devserver.com\",\n\n  // Optional config for secure socket (WSS).\n  {\n    key: fs.readFileSync('test/fixtures/keys/agent2-key.pem'),\n    cert: fs.readFileSync('test/fixtures/keys/agent2-cert.pem')\n  }\n);\n```\n\n### Exported methods\nThe `default` export is an object defining the methods described below.\n\nThese methods support chaining for convenience. For example:\n```js\nconst DevtoolsUI = require(\"react-devtools-core/standalone\");\nDevtoolsUI.setContentDOMNode(element).startServer();\n```\n\n#### `connectToSocket(socket: WebSocket)`\n> This is an advanced config function that is typically not used.\n\nCustom `WebSocket` connection to use for communication between DevTools frontend and backend. Calling this method automatically initializes the DevTools UI (similar to calling `startServer()`).\n\n#### `openProfiler()`\nAutomatically select the \"Profiler\" tab in the DevTools UI.\n\n#### `setContentDOMNode(element: HTMLElement)`\nSet the DOM element DevTools UI should be rendered into on initialization.\n\n#### `setDisconnectedCallback(callback: Function)`\n_Optional_ callback to be notified when DevTools `WebSocket` closes (or errors).\n\n#### `setProjectRoots(roots: Array<string>)`\n_Optional_ set of root directories for source files. These roots can be used to open an inspected component's source code using an IDE.\n\n#### `setStatusListener(callback: Function)`\n_Optional_ callback to be notified of socket server events (e.g. initialized, errored, connected).\n\nThis callback receives two parameters:\n```js\nfunction onStatus(\n  message: string,\n  status: 'server-connected' | 'devtools-connected' | 'error'\n): void {\n  // ...\n}\n```\n\n#### `startServer(port?: number, host?: string, httpsOptions?: Object, loggerOptions?: Object)`\nStart a socket server (used to communicate between backend and frontend) and renders the DevTools UI.\n\nThis method accepts the following parameters:\n| Name | Default | Description |\n|---|---|---|\n| `port` | `8097` | Socket connection to backend should use this port. |\n| `host` | `\"localhost\"` | Socket connection to backend should use this host. |\n| `httpsOptions` | | _Optional_ object defining `key` and `cert` strings. |\n| `loggerOptions` | | _Optional_ object defining a `surface` string (to be included with DevTools logging events). |\n\n# Development\n\nWatch for changes made to the backend entry point and rebuild:\n```sh\nyarn start:backend\n```\n\nWatch for changes made to the standalone UI entry point and rebuild:\n```sh\nyarn start:standalone\n```\n\nRun the standalone UI using `yarn start` in the [`react-devtools`](https://github.com/facebook/react/tree/main/packages/react-devtools).\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/react-devtools-core/-/react-devtools-core-5.3.2.tgz#d5df92f8ef2a587986d094ef2c47d84cf4ae46ec",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/react-devtools-core/-/react-devtools-core-5.3.2.tgz",
    "hash": "d5df92f8ef2a587986d094ef2c47d84cf4ae46ec",
    "integrity": "sha512-crr9HkVrDiJ0A4zot89oS0Cgv0Oa4OG1Em4jit3P3ZxZSKPMYyMjfwMqgcJna9o625g8oN87rBm8SWWrSTBZxg==",
    "registry": "npm",
    "packageName": "react-devtools-core",
    "cacheIntegrity": "sha512-crr9HkVrDiJ0A4zot89oS0Cgv0Oa4OG1Em4jit3P3ZxZSKPMYyMjfwMqgcJna9o625g8oN87rBm8SWWrSTBZxg== sha1-1d+S+O8qWHmG0JTvLEfYTPSuRuw="
  },
  "registry": "npm",
  "hash": "d5df92f8ef2a587986d094ef2c47d84cf4ae46ec"
}